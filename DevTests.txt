# This will go on the linux side
import serial
import time
import threading
import queue
import tkinter as tk
from get_configuration import run_config_gui_with_interfaces
import os
import json


class DevTests:
    # Class constants
    DEFAULT_BAUD_RATE = 115200
    TELEMETRIES = ["SCAN_INTERFACES"]
    CONFIG_FOLDER = "MicropythonConfigurationFiles"


    def __init__(self):

        # Serial port and thread management
        self.port = '/dev/ttyUSB0'
        self.ser = self.create_serial()
        self.receiver_thread = threading.Thread(target=self.serial_receiver_thread, daemon=True)
        self.receiver_thread.start()
        self.receiver_running = False
        self.received_data_queue = queue.Queue()
        self.commands = [b"define_pin", b"define_interface", b"set_gpio_value"]
        self.interfaces = {}
        self.configuration_file = ""

    def serial_receiver_thread(self):

        print(f"[RX Thread] Starting receiver on {self.port} at {DevTests.DEFAULT_BAUD_RATE} baudrate...")
        while self.receiver_running:
            try:
                if self.ser.in_waiting > 0:
                    line = self.ser.readline().decode('utf-8').strip()
                    if line:
                        self.received_data_queue.put(line)
                time.sleep(0.01)
            except serial.SerialException as e:
                print(f"ERROR || Receive thread error || {e}")
                self.receiver_running = False
                break


    def create_serial(self):

        ser_connection = serial.Serial(self.port, DevTests.DEFAULT_BAUD_RATE)

        print("Reading initial micropython boot")
        initial_output = []
        start_time = time.time()
        while time.time() - start_time < 3.0:
            if ser_connection.in_waiting > 0:
                try:
                    line = ser_connection.readline().decode('utf-8').strip()
                    if line:
                        initial_output.append(line)
                        if line.endswith('>>>'):
                            break
                except UnicodeDecodeError:
                    initial_output.append("[Decode Error] Received non-UTF-8 data during initial read.")
            time.sleep(0.01)

        for line in initial_output:
            print(f"  {line}")
        print("-" * 40)
        print("-" * 40)

        return ser_connection

    def configure_from_file(self):
        """
        Reads the stored JSON configuration file and sends commands to the MicroPython device
        to define pins and interfaces.
        """
        if not self.configuration_file:
            print("ERROR || No configuration file selected or saved. Cannot apply configuration.")
            return False

        full_file_path = os.path.join(self.CONFIG_FOLDER, self.configuration_file)

        if not os.path.exists(full_file_path):
            print(f"ERROR || Configuration file not found: {full_file_path}")
            return False

        config_data = None
        try:
            with open(full_file_path, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            print(f"INFO || Successfully loaded configuration from {self.configuration_file}")
        except FileNotFoundError:
            print(f"ERROR || Configuration file not found: {full_file_path}")
            return False
        except json.JSONDecodeError as e:
            print(f"ERROR || Failed to decode JSON from {full_file_path}: {e}")
            return False
        except Exception as e:
            print(f"ERROR || An unexpected error occurred while reading {full_file_path}: {e}")
            return False

        if config_data is None:
            return False

        gpios = config_data.get("gpios", [])
        if not gpios:
            print("INFO || No GPIOs defined in the configuration.")
        for gpio in gpios:
            pin = gpio.get("pin")
            name = gpio.get("name")
            mode = gpio.get("mode")
            pull = gpio.get("pull")

            if None in [pin, name, mode, pull]:
                print(f"WARNING || Skipping malformed GPIO entry: {gpio}")
                continue

            # Example: define_pin|1|LED_BUILTIN|Output|None
            self.exec_command(b"define_pin", [pin, name, mode, pull])
            time.sleep(0.05)

        interfaces = config_data.get("interfaces", {})
        if not interfaces:
            print("INFO || No interfaces defined in the configuration.")

        for interface_type, params in interfaces.items():
            if interface_type == "UART":
                uart_id = params.get("id")
                uart_baud = params.get("baudrate")
                if None in [uart_id, uart_baud]:
                    print(f"WARNING || Skipping malformed UART entry: {params}")
                    continue
                # Example: define_interface|UART|1|9600
                self.exec_command(b"define_interface", [interface_type, uart_id, uart_baud])
            elif interface_type == "I2C":
                # TODO: make sure what happens when I2C has no ID
                i2c_id = params.get("id", "")
                sda_pin = params.get("sda_pin")
                scl_pin = params.get("scl_pin")
                i2c_baud = params.get("baud")
                if None in [sda_pin, scl_pin, i2c_baud]:
                    print(f"WARNING || Skipping malformed I2C entry: {params}")
                    continue
                self.exec_command(b"define_interface", [interface_type, i2c_id, sda_pin, scl_pin, i2c_baud])
            elif interface_type == "SPI":
                # TODO: make sure what happens when SPI has no ID
                spi_id = params.get("id", "")
                mosi = params.get("mosi")
                miso = params.get("miso")
                sck = params.get("sck")
                cs = params.get("cs")
                spi_baud = params.get("baud")
                if None in [mosi, miso, sck, cs, spi_baud]:
                    print(f"WARNING || Skipping malformed SPI entry: {params}")
                    continue
                # Example command: define_interface|SPI|1|23|19|18|5|1000000 (if ID present)
                # Or: define_interface|SPI||23|19|18|5|1000000 (if ID not present)
                self.exec_command(b"define_interface", [interface_type, spi_id, mosi, miso, sck, cs, spi_baud])
            else:
                print(f"WARNING || Unknown interface type: {interface_type}. Skipping.")
            time.sleep(0.05)  # Small delay between commands

        print("\n--- Configuration application process complete. ---")
        return True

    def get_telemetry(self, line):
        # Scan interface format- "TELEMETRY|SCAN_INTERFACES|SPI|(1, 2)|I2C|(0, 1)|UART|(1, 2)"
        try:
            split_line = line.split("|")
            telemetry_type = split_line[1]
            if telemetry_type == "SCAN_INTERFACES":
                split_line = split_line[2:]
                for i in range(0, len(split_line), 2):
                    interface_type = split_line[i]
                    interface_ids = list(eval(split_line[i + 1]))
                    if interface_type in self.interfaces.keys():
                        print(f"INFO || {interface_type} already configured, skipping... \n")
                    else:
                        self.interfaces[interface_type] = interface_ids
                        print(f"INFO || Configured {interface_type} with ids: {interface_ids}\n")

            self.configuration_file = run_config_gui_with_interfaces(self.interfaces)
            self.configure_from_file()
        except Exception as e:
            print(f"[ERROR] || Failed to parse telemetry {line} {e}\n")

    def empty_queue(self):

        while not self.received_data_queue.empty():
            received_line = self.received_data_queue.get()
            if received_line:
                print(f"[CHIP-OUT] || {received_line}\n")
                if received_line.startswith("TELEMETRY|"):
                        self.get_telemetry(received_line)

    def exec_command(self, func, params):
        command = func + b"|" + b"|".join(params)
        self.ser.write(command + b"\n")
        print(f"INFO || Sent command: {command}")
        self.empty_queue()
        time.sleep(0.1)
        self.empty_queue()


if __name__ == '__main__':
    dt = DevTests()




